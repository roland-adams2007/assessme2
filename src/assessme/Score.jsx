import { useLocation, useNavigate } from 'react-router-dom';
import { useState } from 'react';
import { jsPDF } from 'jspdf';

function Score() {
  const navigate = useNavigate();
  const location = useLocation();
  const { results } = location.state || {};

  const [currentPage, setCurrentPage] = useState(0);

  if (!results) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <h2 className="text-xl font-bold text-gray-700">No results available.</h2>
      </div>
    );
  }

  const questionsPerPage = 4;
  let correctScore = 0;
  let wrongScore = 0;
  let unanswered = 0;
  const totalQuestions = results.length;

  results.forEach((result) => {
    if (result.isCorrect) {
      correctScore++;
    } else if (!result.selectedAnswer) {
      unanswered++;
    } else {
      wrongScore++;
    }
  });

  const percentageScore = totalQuestions === 0 ? 0 : (correctScore / totalQuestions) * 100;

  // Function to generate PDF
  const downloadResult = () => {
    const doc = new jsPDF();
    doc.setFontSize(28);
    doc.setFont("helvetica", "bold");
    doc.text('AssessMe', 20, 20);
    doc.setLineWidth(0.5);
    doc.line(20, 30, 190, 30);
    doc.setFontSize(22);
    doc.setFont("helvetica", "normal");
    doc.text('Your Score Report', 20, 40);
    doc.text('', 20, 50);
    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    doc.text(`Total Score: ${percentageScore.toFixed(2)}%`, 20, 60);
    doc.text('', 20, 70);
    doc.setFont("helvetica", "normal");
    doc.text(`Correct Answers: ${correctScore}/${totalQuestions}`, 20, 80);
    doc.text(`Wrong Answers: ${wrongScore}/${totalQuestions}`, 20, 90);
    doc.text(`Unanswered: ${unanswered}/${totalQuestions}`, 20, 100);
    doc.text('', 20, 110);
    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    doc.text('Review of Your Answers:', 20, 120);
    doc.text('', 20, 130);
    let yOffset = 140;
    const pageHeight = doc.internal.pageSize.height;
    results.forEach((result, index) => {
      if (yOffset > pageHeight - 40) {
        doc.addPage();
        yOffset = 20;
      }
      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      doc.setFont("helvetica", "bold");
      doc.text(`${index + 1}. ${result.question}`, 20, yOffset);
      doc.setFont("helvetica", "normal");
      doc.text(`Your Answer: ${result.selectedAnswer || 'Unanswered'}`, 20, yOffset + 10);
      doc.text(`Correct Answer: ${result.correctAnswer}`, 20, yOffset + 20);
      doc.setFont("helvetica", "italic");
      const status = result.isCorrect ? 'Correct' : 'Wrong';
      const color = result.isCorrect ? [0, 128, 0] : [255, 0, 0];
      doc.setTextColor(color[0], color[1], color[2]);
      doc.text(`Status: ${status}`, 20, yOffset + 30);
      doc.setTextColor(0, 0, 0);
      yOffset += 40;
    });
    doc.text('', 20, yOffset);
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text('Generated by AssessMe', 20, yOffset + 10);
    doc.text('Â© 2024 All Rights Reserved', 150, yOffset + 10);
    doc.save('result.pdf');
    localStorage.removeItem('user_details');
  };


  const currentQuestions = results.slice(
    currentPage * questionsPerPage,
    (currentPage + 1) * questionsPerPage
  );


  const handleNext = () => {
    if ((currentPage + 1) * questionsPerPage < totalQuestions) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handlePrev = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };


  const handleStartOver = () => {
    localStorage.removeItem('user_details');
    navigate('/account');
  };

  return (
    <>
      <title>AssessMe - Score Page</title>
      <div className="min-h-screen flex flex-col items-center justify-center px-4 py-8"
      style={{
        backgroundImage: 'url(assets/images/notebook.jpg)',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
      }}>
        <div className="w-full max-w-5xl bg-white p-8 rounded-2xl shadow-lg">
          <h1 className="text-4xl font-bold text-center text-indigo-700 mb-12">
            <i className="fas fa-trophy text-indigo-600 mr-3" /> Your Score
          </h1>
          <div className="mb-8 text-center">
            <h2 className="text-3xl font-semibold text-gray-900 mb-4">
              Total Score: {percentageScore.toFixed(2) + '%'}
            </h2>
            <div className="relative pt-1 mb-6">
              <div className="flex mb-2 items-center justify-between">
                <span className="text-sm font-semibold">Total Score Progress</span>
                <span className="text-xs font-semibold text-indigo-600">{percentageScore.toFixed(2) + '%'}</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-3">
                <div
                  className="bg-indigo-600 h-3 rounded-full"
                  style={{
                    width: `${percentageScore.toFixed(2)}%`,
                  }}
                />
              </div>
            </div>
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
            <div className="bg-green-100 p-6 rounded-xl shadow-md">
              <div className="flex items-center mb-4">
                <i className="fas fa-check-circle text-green-600 text-3xl mr-3" />
                <h3 className="text-xl font-semibold text-gray-900">Correct Answers</h3>
              </div>
              <p className="text-gray-700 text-lg">{correctScore}/{totalQuestions}</p>
            </div>
            <div className="bg-red-100 p-6 rounded-xl shadow-md">
              <div className="flex items-center mb-4">
                <i className="fas fa-times-circle text-red-600 text-3xl mr-3" />
                <h3 className="text-xl font-semibold text-gray-900">Wrong Answers</h3>
              </div>
              <p className="text-gray-700 text-lg">{wrongScore}/{totalQuestions}</p>
            </div>
            <div className="bg-yellow-100 p-6 rounded-xl shadow-md">
              <div className="flex items-center mb-4">
                <i className="fas fa-question-circle text-yellow-600 text-3xl mr-3" />
                <h3 className="text-xl font-semibold text-gray-900">Unanswered</h3>
              </div>
              <p className="text-gray-700 text-lg">{unanswered}/{totalQuestions}</p>
            </div>
          </div>
          <div className="bg-indigo-50 p-6 rounded-xl shadow-md">
            <h3 className="text-2xl font-semibold text-gray-900 mb-4">
              Review Answers
            </h3>
            <div className="space-y-4">
              {currentQuestions.map((result, index) => (
                <div key={index} className="p-4 border-b border-gray-200">
                  <div className="flex items-center mb-2">
                    <span className="font-semibold text-gray-800">Q{index + 1}: </span>
                    <span className="ml-2">{result.question}</span>
                  </div>
                  <div>
                    <span className="font-semibold">Your Answer: </span>
                    <span>{result.selectedAnswer || 'Unanswered'}</span>
                  </div>
                  <div>
                    <span className="font-semibold">Correct Answer: </span>
                    <span>{result.correctAnswer}</span>
                  </div>
                  <div>
                    <span className="font-semibold">Status: </span>
                    <span className={result.isCorrect ? 'text-green-500' : 'text-red-500'}>
                      {result.isCorrect ? 'Correct' : 'Wrong'}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <div className="flex justify-between mt-8">
            <button
              className="bg-indigo-600 text-white py-2 px-4 rounded-lg shadow-md hover:bg-indigo-700"
              onClick={handlePrev}
              disabled={currentPage === 0}
            >
              Previous
            </button>
            <button
              className="bg-indigo-600 text-white py-2 px-4 rounded-lg shadow-md hover:bg-indigo-700"
              onClick={handleNext}
              disabled={(currentPage + 1) * questionsPerPage >= totalQuestions}
            >
              Next
            </button>
          </div>
          <div className="mt-8 flex justify-center space-x-4">
            <button
              className="bg-green-600 text-white py-2 px-4 rounded-lg shadow-md hover:bg-green-700"
              onClick={downloadResult}
            >
              Download PDF
            </button>
            <button
              className="bg-red-600 text-white py-2 px-4 rounded-lg shadow-md hover:bg-red-700"
              onClick={handleStartOver}
            >
              Start Over
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

export default Score;
